// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/R-Thibault/OrgaJobSearch/models"
	mock "github.com/stretchr/testify/mock"
)

// OTPRepositoryInterface is an autogenerated mock type for the OTPRepositoryInterface type
type OTPRepositoryInterface struct {
	mock.Mock
}

// GetOTPCodeByUserID provides a mock function with given fields: userID
func (_m *OTPRepositoryInterface) GetOTPCodeByUserID(userID uint) (*models.OTP, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOTPCodeByUserID")
	}

	var r0 *models.OTP
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*models.OTP, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *models.OTP); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OTP)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOTP provides a mock function with given fields: otp
func (_m *OTPRepositoryInterface) SaveOTP(otp models.OTP) (string, error) {
	ret := _m.Called(otp)

	if len(ret) == 0 {
		panic("no return value specified for SaveOTP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(models.OTP) (string, error)); ok {
		return rf(otp)
	}
	if rf, ok := ret.Get(0).(func(models.OTP) string); ok {
		r0 = rf(otp)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(models.OTP) error); ok {
		r1 = rf(otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOTPRepositoryInterface creates a new instance of OTPRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPRepositoryInterface {
	mock := &OTPRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
