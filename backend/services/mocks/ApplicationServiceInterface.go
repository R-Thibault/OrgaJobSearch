// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/R-Thibault/OrgaJobSearch/backend/models"
	mock "github.com/stretchr/testify/mock"
)

// ApplicationServiceInterface is an autogenerated mock type for the ApplicationServiceInterface type
type ApplicationServiceInterface struct {
	mock.Mock
}

// DeleteApplication provides a mock function with given fields: userID, applicationID
func (_m *ApplicationServiceInterface) DeleteApplication(userID uint, applicationID uint) error {
	ret := _m.Called(userID, applicationID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, applicationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApplicationByID provides a mock function with given fields: userID, applicationID
func (_m *ApplicationServiceInterface) GetApplicationByID(userID uint, applicationID uint) (*models.Application, error) {
	ret := _m.Called(userID, applicationID)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationByID")
	}

	var r0 *models.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*models.Application, error)); ok {
		return rf(userID, applicationID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *models.Application); ok {
		r0 = rf(userID, applicationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, applicationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationsByUserID provides a mock function with given fields: userID, requestSettings
func (_m *ApplicationServiceInterface) GetApplicationsByUserID(userID uint, requestSettings models.RequestSettings) ([]*models.Application, error) {
	ret := _m.Called(userID, requestSettings)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationsByUserID")
	}

	var r0 []*models.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, models.RequestSettings) ([]*models.Application, error)); ok {
		return rf(userID, requestSettings)
	}
	if rf, ok := ret.Get(0).(func(uint, models.RequestSettings) []*models.Application); ok {
		r0 = rf(userID, requestSettings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, models.RequestSettings) error); ok {
		r1 = rf(userID, requestSettings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveApplication provides a mock function with given fields: userID, appData
func (_m *ApplicationServiceInterface) SaveApplication(userID uint, appData models.Application) error {
	ret := _m.Called(userID, appData)

	if len(ret) == 0 {
		panic("no return value specified for SaveApplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, models.Application) error); ok {
		r0 = rf(userID, appData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateApplication provides a mock function with given fields: userID, appData
func (_m *ApplicationServiceInterface) UpdateApplication(userID uint, appData models.Application) (*models.Application, error) {
	ret := _m.Called(userID, appData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *models.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, models.Application) (*models.Application, error)); ok {
		return rf(userID, appData)
	}
	if rf, ok := ret.Get(0).(func(uint, models.Application) *models.Application); ok {
		r0 = rf(userID, appData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, models.Application) error); ok {
		r1 = rf(userID, appData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationServiceInterface creates a new instance of ApplicationServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationServiceInterface {
	mock := &ApplicationServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
