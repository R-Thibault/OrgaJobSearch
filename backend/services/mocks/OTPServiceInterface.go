// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	models "github.com/R-Thibault/OrgaJobSearch/backend/models"
	mock "github.com/stretchr/testify/mock"
)

// OTPServiceInterface is an autogenerated mock type for the OTPServiceInterface type
type OTPServiceInterface struct {
	mock.Mock
}

// CheckAndRefreshOTPCode provides a mock function with given fields: userID, otpType
func (_m *OTPServiceInterface) CheckAndRefreshOTPCode(userID uint, otpType string) (string, error) {
	ret := _m.Called(userID, otpType)

	if len(ret) == 0 {
		panic("no return value specified for CheckAndRefreshOTPCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (string, error)); ok {
		return rf(userID, otpType)
	}
	if rf, ok := ret.Get(0).(func(uint, string) string); ok {
		r0 = rf(userID, otpType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, otpType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateOTP provides a mock function with given fields: userID, otpType
func (_m *OTPServiceInterface) GenerateOTP(userID uint, otpType string) (string, error) {
	ret := _m.Called(userID, otpType)

	if len(ret) == 0 {
		panic("no return value specified for GenerateOTP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (string, error)); ok {
		return rf(userID, otpType)
	}
	if rf, ok := ret.Get(0).(func(uint, string) string); ok {
		r0 = rf(userID, otpType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, otpType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyOTPCode provides a mock function with given fields: otpCode, otpType
func (_m *OTPServiceInterface) VerifyOTPCode(otpCode string, otpType string) (*models.OTP, error) {
	ret := _m.Called(otpCode, otpType)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTPCode")
	}

	var r0 *models.OTP
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.OTP, error)); ok {
		return rf(otpCode, otpType)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.OTP); ok {
		r0 = rf(otpCode, otpType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OTP)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(otpCode, otpType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyOTPGiven provides a mock function with given fields: email, otpType, otpCode
func (_m *OTPServiceInterface) VerifyOTPGiven(email string, otpType string, otpCode string) error {
	ret := _m.Called(email, otpType, otpCode)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTPGiven")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(email, otpType, otpCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOTPServiceInterface creates a new instance of OTPServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTPServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTPServiceInterface {
	mock := &OTPServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
